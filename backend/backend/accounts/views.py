from django.core.mail import send_mail
from rest_framework import status
from django.utils.crypto import get_random_string
from .serializers import UserRegisterSerializer, EmailVerificationSerializer, UserSerializer
from django.contrib.auth import get_user_model
from rest_framework.response import Response
from rest_framework.decorators import api_view, permission_classes
from rest_framework.views import APIView
from rest_framework import generics
from rest_framework.permissions import IsAuthenticated
from rest_framework_simplejwt.tokens import OutstandingToken, BlacklistedToken, RefreshToken
from django.http import JsonResponse
from django.contrib.auth import authenticate
from django.views.decorators.csrf import ensure_csrf_cookie


User = get_user_model()

# ğŸ”¹ MÃ¼vÉ™qqÉ™ti olaraq tÉ™sdiq kodlarÄ±nÄ± saxlamaq Ã¼Ã§Ã¼n (real sistemdÉ™ DB istifadÉ™ edilmÉ™lidir)
verification_codes = {}


# âœ… **Test view â€“ API-nin iÅŸlÉ™diyini yoxlamaq Ã¼Ã§Ã¼n**
@api_view(['GET'])
def jwt_test_view(request):
    return Response({"message": "JWT is working!"})


# âœ… **Ä°stifadÉ™Ã§i QeydiyyatÄ± + Email tÉ™sdiqlÉ™mÉ™ kodu gÃ¶ndÉ™rilmÉ™si**
class UserRegisterView(APIView):
    def post(self, request):
        serializer = UserRegisterSerializer(data=request.data)
        if serializer.is_valid():
            user = serializer.save()

            # ğŸ”¹ 6 rÉ™qÉ™mli tÉ™sdiq kodu yarat
            verification_code = get_random_string(length=6, allowed_chars='1234567890')
            verification_codes[user.email] = verification_code

            # ğŸ”¹ Email gÃ¶ndÉ™r
            send_mail(
                'Email TÉ™sdiqlÉ™mÉ™ Kodu',
                f'Sizin tÉ™sdiq kodunuz: {verification_code}',
                'your_email@example.com',  # ğŸ”¹ Burada real emailini qeyd et
                [user.email],
                fail_silently=False,
            )

            # ğŸ”¹ Bonus É™lavÉ™ et
            user.bonus = 10  # 10 bonus É™lavÉ™ et
            user.save()  # Bonus mÉ™lumatÄ±nÄ± qeydiyyatdan sonra istifadÉ™Ã§iyÉ™ É™lavÉ™ et

            return Response({'message': 'TÉ™sdiq kodu emailÉ™ gÃ¶ndÉ™rildi. Bonus É™lavÉ™ olundu.'}, status=status.HTTP_201_CREATED)

        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


# âœ… **Ä°stifadÉ™Ã§i Login API**
class UserLoginView(APIView):
    def post(self, request):
        username = request.data.get('username')
        password = request.data.get('password')

        # Ä°stifadÉ™Ã§i autentifikasiyasÄ±
        user = authenticate(username=username, password=password)
        if user is not None:
            # Token yaratmaq
            refresh = RefreshToken.for_user(user)
            return Response({
                'refresh': str(refresh),
                'access': str(refresh.access_token),
                'is_admin': user.is_superuser,  # Admin olub-olmadÄ±ÄŸÄ±nÄ± gÃ¶ndÉ™rir
                'username': user.username,
                'email': user.email
            })
        return Response({'error': 'Ä°stifadÉ™Ã§i adÄ± vÉ™ ya ÅŸifrÉ™ yanlÄ±ÅŸdÄ±r'}, status=status.HTTP_401_UNAUTHORIZED)


# âœ… **Email TÉ™sdiqlÉ™mÉ™ API-si**
class VerifyEmailView(APIView):
    def post(self, request):
        serializer = EmailVerificationSerializer(data=request.data)
        if serializer.is_valid():
            email = serializer.validated_data['email']
            code = serializer.validated_data['code']

            if email in verification_codes and verification_codes[email] == code:
                try:
                    user = User.objects.get(email=email)
                    user.is_active = True  # ğŸ”¹ Ä°stifadÉ™Ã§ini aktiv et
                    user.save()
                    del verification_codes[email]  # ğŸ”¹ Kod siyahÄ±dan silinsin
                    return Response({'message': 'Email tÉ™sdiqlÉ™ndi, indi daxil ola bilÉ™rsiniz.'},
                                    status=status.HTTP_200_OK)
                except User.DoesNotExist:
                    return Response({'message': 'Ä°stifadÉ™Ã§i tapÄ±lmadÄ±.'}, status=status.HTTP_400_BAD_REQUEST)

            return Response({'message': 'YanlÄ±ÅŸ kod.'}, status=status.HTTP_400_BAD_REQUEST)

        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


# âœ… **Ä°stifadÉ™Ã§i Profil API (Profil mÉ™lumatlarÄ±nÄ± gÃ¶stÉ™rmÉ™k vÉ™ yenilÉ™mÉ™k Ã¼Ã§Ã¼n)**
class UserProfileView(generics.RetrieveUpdateAPIView):
    queryset = User.objects.all()
    serializer_class = UserSerializer
    permission_classes = [IsAuthenticated]

    def get_object(self):
        return self.request.user  # ğŸ”¹ Cari istifadÉ™Ã§inin mÉ™lumatlarÄ±nÄ± qaytarÄ±r


# âœ… **Qorunan API (YalnÄ±z token ilÉ™ giriÅŸ mÃ¼mkÃ¼ndÃ¼r)**
@api_view(['GET'])
@permission_classes([IsAuthenticated])
def protected_view(request):
    return Response({"message": "Bu qorunan sÉ™hifÉ™dir!"})


# âœ… **CSRF token endpointi**
@ensure_csrf_cookie
def get_csrf_token(request):
    return JsonResponse({"csrfToken": request.META.get("CSRF_COOKIE", "")})


# âœ… **Custom Logout View â€“ Ä°stifadÉ™Ã§ini logout edÉ™n API**
class CustomUserLogoutView(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request):
        try:
            # ğŸ”¹ Ä°stifadÉ™Ã§inin bÃ¼tÃ¼n aktiv tokenlÉ™rini blackliste sal
            tokens = OutstandingToken.objects.filter(user=request.user)
            for token in tokens:
                BlacklistedToken.objects.get_or_create(token=token)

            return Response({"message": "Logged out successfully"}, status=200)
        except Exception as e:
            return Response({"error": str(e)}, status=500)


# âœ… **User BonuslarÄ± - Bonus verilmÉ™si**
class AddBonusView(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request):
        try:
            user = request.user
            bonus_amount = request.data.get('bonus_amount', 10)  # Bonus mÉ™blÉ™ÄŸini parametrlÉ™ alÄ±rÄ±q (default 10)

            # Ä°stifadÉ™Ã§iyÉ™ bonus É™lavÉ™ et
            user.bonus += bonus_amount
            user.save()

            return Response({'message': f'{bonus_amount} bonus É™lavÉ™ olundu.'}, status=status.HTTP_200_OK)
        except Exception as e:
            return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
