from rest_framework import serializers
from django.contrib.auth import get_user_model

User = get_user_model()

# âœ… Yeni istifadÉ™Ã§i qeydiyyatÄ± Ã¼Ã§Ã¼n serializer
class UserRegisterSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True, min_length=6)

    class UserSerializer(serializers.ModelSerializer):
        class Meta:
            model = User
            fields = ['id', 'username', 'email', 'is_superuser']  # ğŸ”¹ `is_superuser` É™lavÉ™ edildi

    class Meta:
        model = User
        fields = ['id', 'username', 'email', 'password']

    def create(self, validated_data):
        """
        Yeni istifadÉ™Ã§i yaradarkÉ™n `set_password` metodundan istifadÉ™ edirik ki, parol `hash` edilsin.
        """
        user = User(
            username=validated_data['username'],
            email=validated_data['email']
        )
        user.set_password(validated_data['password'])  # âœ… Parolu tÉ™hlÃ¼kÉ™siz ÅŸÉ™kildÉ™ hash edir
        user.is_active = False  # ğŸ”¹ Ä°stifadÉ™Ã§i email tÉ™sdiqlÉ™yÉ™nÉ™ qÉ™dÉ™r deaktiv qalsÄ±n
        user.save()  # âœ… Ä°stifadÉ™Ã§ini bazaya É™lavÉ™ edir
        return user

# âœ… Ä°stifadÉ™Ã§i profilini gÃ¶stÉ™rmÉ™k vÉ™ redaktÉ™ etmÉ™k Ã¼Ã§Ã¼n serializer
class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['id', 'username', 'email']

# âœ… Email tÉ™sdiqlÉ™mÉ™ Ã¼Ã§Ã¼n serializer
class EmailVerificationSerializer(serializers.Serializer):
    email = serializers.EmailField()
    code = serializers.CharField(max_length=6)
